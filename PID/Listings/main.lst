C51 COMPILER V9.59.0.0   MAIN                                                              05/05/2019 20:54:10 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: H:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg51.h>
   2          
   3          #include "PID.h"
   4          #include "ADC083X.h"
   5          #include "math.h"
   6          #include "LCD1602.h"
   7          #include "stdio.h"
   8          
   9          uint32_t millis();
  10          float NTC_Temp(void);
  11          void KeyScan();
  12          uint32_t tick = 0;
  13          
  14          
  15          idata PID_Class adout;
  16          
  17          
  18          uint8_t PWM = 0;
  19          double input,output,set = 40;
  20          void main()
  21          {
  22   1        uint8_t disbuff[16];
  23   1        uint8_t volatile num = 0;
  24   1        
  25   1        LCD_Init();
  26   1        
  27   1        TMOD &= 0xF0;   //设置定时器模式
  28   1        TMOD |= 0x01;   //设置定时器模式
  29   1        TL0 = 0x18;   //设置定时初值
  30   1        TH0 = 0xFC;   //设置定时初值
  31   1        TF0 = 0;    //清除TF0标志
  32   1        TR0 = 1;    //定时器0开始计时
  33   1        
  34   1        ET0 = 1;
  35   1        
  36   1        TMOD &= 0x0F;   //设置定时器模式
  37   1        TMOD |= 0x20;   //设置定时器模式
  38   1        TL1 = 0x06;   //设置定时初值
  39   1        TH1 = 0x06;   //设置定时重载值
  40   1        TF1 = 0;    //清除TF1标志
  41   1        TR1 = 1;    //定时器1开始计时
  42   1        
  43   1        ET1 = 1;
  44   1        EA = 1;
  45   1        
  46   1        /********************************
  47   1        首先，怎么确定计算周期，大概是系统从输出控制到上升到输出控制的60%-80%之间的时间(可以视系统不同而调节)
  48   1        eg:举例子:加热器:我输出一个控制比如是X,经过无限长的时间，温度停留在Y，那么大概是取温度上升到0.6Y-0.8Y的这
             -个时间，
  49   1        由于有些系统非线性程度很高是幂函数的变化，这个时候，要达到最好的控制效果，我会增加计算的时间间隔
  50   1        
  51   1        确定Kp,Ki，Kd，一般用不到Kd就可以有很好的控制效果，Kd我一般用于有大滞后的系统，例如控制温度，
  52   1        Kd可以在温度还没有到达设置值的时候就减少控制输出
  53   1        
C51 COMPILER V9.59.0.0   MAIN                                                              05/05/2019 20:54:10 PAGE 2   

  54   1        首先，把Ki，Kd设置成0，不断加大Kp直到产生振荡，作为启振点，
  55   1        然后:Ki慢慢加，加到开始振荡，取其80%-90%
  56   1        
  57   1        如果系统控制严重滞后，慢慢的增加Kd的值，使得第一次超调和第二次的峰比4比1是最理想的
  58   1        
  59   1        PID完整离散公式:OUT = kp * error + (ki * T)/Ti * ∑error + kd *Td/T * △error
  60   1      
  61   1        T:PID计算采样周期，Ti:积分时间 Td:微分时间 error:采样和期望值的差    ∑error:累积的error 
  62   1      
  63   1        △error:两次error的差 
  64   1        
  65   1        *********************************/
  66   1        adc083x_init();
  67   1        LCD_Clear();
  68   1        new_PID(&adout,&input,&output,&set,1.4,0.1,0,P_ON_E,DIRECT);//正常模式，正相关
  69   1        PID_Initialize(&adout);//初始化
  70   1        
  71   1        PID_SetMode(&adout,AUTOMATIC);//自动计算模式
  72   1        PID_SetOutputLimits(&adout,0,255);
  73   1        PID_SetSampleTime(&adout,5000);//设置PID计算周期为5000ms
  74   1        LCD_PutString(0,0,"Set:");
  75   1        LCD_PutString(0,1,"Temp:");
  76   1        while(1)
  77   1        {
  78   2          input = NTC_Temp();//获取温度
  79   2          sprintf(disbuff,"Temp:%2.1f'C",input);
  80   2          LCD_PutString(0,1,disbuff);//显示当前温度
  81   2          sprintf(disbuff,"Set:%2.1f'C ",set);
  82   2          LCD_PutString(0,0,disbuff);//显示设置值
  83   2          if(PID_Compute(&adout) == true)//大概五次采样计算一次,温度变化很慢，这个采样计算周期根据自己加热设备来判
             -断
  84   2          {
  85   3            
  86   3            PWM = (uint8_t)output;
  87   3          }
  88   2          KeyScan();
  89   2        }
  90   1      }
  91          void KeyScan()
  92          {
  93   1        static uint8_t lastkey = (0x03<<4);
  94   1        uint8_t key = P1&(0x03<<4);
  95   1        if(key != lastkey && lastkey == (0x03<<4))//扫描到下降沿
  96   1        {
  97   2          switch(key)
  98   2          {
  99   3            case 0x00<<4://两个按键同时按下,不操作
 100   3            {
 101   4              
 102   4            }
 103   3            break;
 104   3            case 0x01<<4:
 105   3            {
 106   4              
 107   4              set = (((int)set)-1);
 108   4            }
 109   3            break;
 110   3            case 0x02<<4:
 111   3            {
 112   4              
 113   4              set = (((int)set)+1);
 114   4            }
C51 COMPILER V9.59.0.0   MAIN                                                              05/05/2019 20:54:10 PAGE 3   

 115   3            break;
 116   3          }
 117   2        }
 118   1        lastkey = key;
 119   1      }
 120          uint32_t millis()
 121          {
 122   1        return tick;
 123   1      }
 124          float NTC_Temp(void)
 125          {
 126   1        const float Rp=10000.0; //10K
 127   1        const float T2 = (273.15+25.0);//T2
 128   1        const float Bx = 3950.0;//B NTC的B值
 129   1        const float Ka = 273.15;
 130   1        float Rt;
 131   1        float temp;
 132   1        Rt = (float)adc083x_do_one_change(0x02);//采集电压
 133   1        Rt = Rp*(255-Rt)/Rt;//计算NTC电阻
 134   1        //like this R=5000, T2=273.15+25,B=3470, RT=5000*EXP(3470*(1/T1-1/(273.15+25)),  
 135   1        temp = Rt/Rp;
 136   1        temp = log(temp);//ln(Rt/Rp)
 137   1        temp/=Bx;//ln(Rt/Rp)/B
 138   1        temp+=(1/T2);
 139   1        temp = 1/(temp);
 140   1        temp-=Ka;
 141   1        return temp;
 142   1      } 
 143          void Timer1_IRQ() interrupt 3 //用于PWM输出
 144          {
 145   1        static uint8_t i=0;
 146   1        if(PWM >= i)
 147   1        {
 148   2          P3 |= 0x01;//高
 149   2        }
 150   1        else
 151   1        {
 152   2          P3 &= ~(0x01);//低
 153   2        }
 154   1        i++;
 155   1      }
 156          void Timer0_IRQ() interrupt 1
 157          {
 158   1        TL0 = 0x18;   //设置定时初值
 159   1        TH0 = 0xFC;   //设置定时初值
 160   1        
 161   1        tick++;
 162   1      
 163   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    746    ----
   CONSTANT SIZE    =     37    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19      42
   IDATA SIZE       =     61    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
